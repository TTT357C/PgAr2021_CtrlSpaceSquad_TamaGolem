final int NUMERO_ELEMENTI = 5;
        final int VALORE_MAX = 10;
        Random rand = new Random();
        ArrayList<Tipo> tipi = new ArrayList<>();
        boolean[] array = new boolean[100];

        //tutti
        ArrayList<Tipo> tipi_temp = new ArrayList<>();
        for (Tipo dir : Tipo.values()) {
            tipi_temp.add(dir);
        }
        //elimino in piu' aggiungendo a secondo array solo quelli che servono
        int arr_lenght = tipi_temp.size();
        for (int i = 0; i < NUMERO_ELEMENTI; i++) {
            tipi.add(tipi_temp.get(i));
        }
        //setto a true quelli da utilizzare
        for (Tipo dir : tipi) {
            dir.setM(true);
        }

        System.out.println(tipi);

        int cont = 0;
        int cont_true=0;
        for (int i = 0; i < NUMERO_ELEMENTI; i++) {

            //Parte da i + 1 per evitare doppioni
            for (int j = i + 1; j < NUMERO_ELEMENTI; j++) {
                //Creo i sensi delle frecce del grafo

                //Random
                boolean temp = rand.nextBoolean();

                //Per evitare tutti true
                //=================================================
                if (temp == true) {
                    cont_true++;
                }
                if (cont_true >= NUMERO_ELEMENTI-(i+1)){
                    temp=false;
                }
                //=================================================

                //Aggiungo i sensi al TreeMap di Tipo e del Tipo unito dall' arco
                tipi.get(i).getArchi().put(tipi.get(j).ordinal(), (new Arco(temp)));
                //L' arco avra' il senso al contrario perche' cambia il punto di vista
                tipi.get(j).getArchi().put(tipi.get(i).ordinal(), new Arco(!temp));

                cont++;
            }
            //reset contatore true
            cont_true=0;
        }

        for (Tipo dir : tipi) {
            System.out.println(dir);
        }

        //=================================================
        // Calcolo valori archi
        //=================================================

        for (int i = 0; i < NUMERO_ELEMENTI; i++) {
            //=================================================
            //trovo il numero di archi "dominanti"
            tipi.get(i).calcoloTrue();
            //=================================================
        }

        //==================================================================================================

        for (int i = 0; i < NUMERO_ELEMENTI-1; i++) {

            int nFalse=(NUMERO_ELEMENTI-tipi.get(i).getN_true()-1);

            //contatori
            int cont_f=nFalse;
            int cont_t=tipi.get(i).getN_true();

            int temp_max_false2 = 0;
            int temp_max_true2 = 0;

            //aggiorno se gia presenti valori da iterazioni precedenti
            for (int j = 0; j < tipi.get(i).getArchi().size()+1; j++) {
                if (j != i) {
                    if (tipi.get(i).getArchi().get(j).getSenso()==false && tipi.get(i).getArchi().get(j).getValore()!=-1){
                        temp_max_false2 += tipi.get(i).getArchi().get(j).getValore();
                        cont_f--;
                    }
                    else if (tipi.get(i).getArchi().get(j).getSenso()==true && tipi.get(i).getArchi().get(j).getValore()!=-1){
                        temp_max_true2 += tipi.get(i).getArchi().get(j).getValore();
                        cont_t--;
                    }
                }
            }
            int temp_max_false3 = 0;
            int temp_max_true3 = 0;
            if(temp_max_false2 < nFalse){
                temp_max_false3=nFalse;
            }
            else {
                temp_max_false3=temp_max_false2;
            }
            if(temp_max_true2 < tipi.get(i).getN_true()){
                temp_max_true3=tipi.get(i).getN_true();
            }
            else {
                temp_max_true3=temp_max_true2;
            }

            int a; //minimo

            if (nFalse >= tipi.get(i).getN_true()) {
                a=temp_max_false3;
            }
            else {
                a=temp_max_true3; // numero minimo
            }

            int b = VALORE_MAX; // numero massimo
            int c = ((b-a) + 1);
            //Numero da cui estrarre gli altri numeri delle frecce del grafo es: 10 = 5 + 3 + 2 + 1


            int temp_max = rand.nextInt(c) + a;


            System.out.println(" nTrue "+tipi.get(i).getN_true());
            System.out.println(" nFalse"+nFalse);

            int temp_max_false = temp_max-temp_max_false2;
            int temp_max_true = temp_max-temp_max_true2;

            if(temp_max_true<0){
                temp_max_false+=(Math.abs(temp_max_true)-1);
                temp_max_true=1;
            }
            if(temp_max_false<0){
                temp_max_true+=(Math.abs(temp_max_false)-1);
                temp_max_false=1;
            }

            int cont_numeri_false=0;
            int cont_numeri_true=0;

            System.out.println(" eee= "+temp_max_false);
            int[] numeri_false = RandomNumSum(temp_max_false,cont_f);
            System.out.println(" eee= "+temp_max_true);
            int[] numeri_true = RandomNumSum(temp_max_true,cont_t);
            for (int j = 0; j < tipi.get(i).getArchi().size()+1; j++) {

                if (j != i) {
                    if (tipi.get(i).getArchi().get(j).getSenso()==false && tipi.get(i).getArchi().get(j).getValore()==-1) {
                        tipi.get(i).getArchi().get(j).setValore(numeri_false[cont_numeri_false]);
                        tipi.get(j).getArchi().get(i).setValore(numeri_false[cont_numeri_false]);
                        cont_numeri_false++;
                    }
                    if (tipi.get(i).getArchi().get(j).getSenso()==true && tipi.get(i).getArchi().get(j).getValore()==-1) {
                        tipi.get(i).getArchi().get(j).setValore(numeri_true[cont_numeri_true]);
                        tipi.get(j).getArchi().get(i).setValore(numeri_true[cont_numeri_true]);
                        cont_numeri_true++;
                    }
                }
            }
        }

        for (Tipo dir : tipi) {
                    System.out.println(dir);
        }

        public static int[] RandomNumSum(int num_max, int parti){
                Random rand = new Random();
                int[] numeri = new int[parti];

                int temp = 0;
                int sum = 0;
                for (int i = 0; i < parti; i++) {
                    if (!((i+1) == parti)) {
                        temp = rand.nextInt((num_max - sum) / (parti - (i+1))) + 1;
                        numeri[i]=temp;
                        sum += temp;

                    } else {
                        int last = (num_max - sum);
                        if (last == 0) {
                            //TODO controlla
                            numeri[parti-2]=(numeri[parti-2]-1);
                            last++;
                            sum--;
                        }

                        numeri[i]=last;
                        sum += last;
                    }
                }

                return numeri;
            }


        //===========================================================================================================
        //Versione 2 Old

           /**
             * <h1> generatoreBordoMatrice </h1>
             * <p> Metodo che genera il bordo della matrice seguendo uno schema prefissato </p>
             * <b> Nota: Funziona solo dall' esterno verso l' interno </b>
             * @author Thomas Causetti
             * @param rand java.util.Random
             * @param matrice e' la matrice da modificare
             * @param dim_rig_col Indica la se ci sono state iterazioni precedenti di questo metodo e quindi il metodo deve fare un bordo piu'
             *                    interno.
             */
            private boolean generatoreBordoMatrice(Random rand, int[][] matrice, int dim_rig_col) {

                //=================================================
                final int UNO_P=1+dim_rig_col;
                final int ZERO_P=0+dim_rig_col;
                final int NUMERO_ELEMENTI_P=NUMERO_ELEMENTI-dim_rig_col;
                //Generatore numeri casuali
                int somma=0; //somma numeri (serve per dopo)
                int temp_somma=0;
                for (int i = NUMERO_ELEMENTI_P-1; i > (1+dim_rig_col); i--) {
                    //Da + VALORE_MAX_RANDOM_NUM a - VALORE_MAX_RANDOM_NUM
                    int temp;

                    //Controlla che il numero random sia diverso da 0
                    do {
                        temp=rand.nextInt((2 * VALORE_MAX_RANDOM_NUM) + 1) - VALORE_MAX_RANDOM_NUM;
                        temp_somma+=temp;
                    } while(temp==0);

                    //se bordo esterno e somma == 0 e i == al ultimo valore
                    //per evitare che la somma dei numeri random = 0
                    if(temp_somma==0 && i==(2+dim_rig_col)){
                        //Inverto segno
                        temp=0-temp;
                    }

                    matrice[i][ZERO_P] = temp;

                    if (matrice[i][ZERO_P] == 0) {
                        matrice[i][ZERO_P]=1;
                    }
                    //Rendi simmetrica
                    matrice[ZERO_P][i]= matrice[i][ZERO_P];
                    //System.out.println((NUMERO_ELEMENTI_P-1)+" + "+((NUMERO_ELEMENTI_P-1)-i));
                    matrice[NUMERO_ELEMENTI_P-1][(NUMERO_ELEMENTI_P-1+dim_rig_col)-i]= matrice[i][ZERO_P];
                    //System.out.println(((NUMERO_ELEMENTI_P-1)-i)+" + "+(NUMERO_ELEMENTI_P-1));
                    matrice[(NUMERO_ELEMENTI_P-1+dim_rig_col)-i][NUMERO_ELEMENTI_P-1]= matrice[i][ZERO_P];

                    somma+= matrice[i][ZERO_P];
                }


                //=================================================


                if (dim_rig_col!=0) {
                    somma=0;
                    //ZERO_P-1 Colonna precedente
                    int cont=0;
                    do {
                        somma+=matrice[UNO_P][cont];
                        cont++;
                    }while(cont < ZERO_P);
                }

                if (somma==0){
                    //non corretto
                    System.out.println("E1");
                    return false;
                }


                //=================================================
                //Calcolo primo valore colonna
                matrice[UNO_P][ZERO_P]=0;
                matrice[UNO_P][ZERO_P]-=somma;
                matrice[ZERO_P][UNO_P]= matrice[UNO_P][ZERO_P];
                matrice[(NUMERO_ELEMENTI_P-2)][NUMERO_ELEMENTI_P-1]= matrice[UNO_P][ZERO_P];
                matrice[(NUMERO_ELEMENTI_P-1)][NUMERO_ELEMENTI_P-2]= matrice[UNO_P][ZERO_P];
                //=================================================

                somma=0;

                //TODO
                if (dim_rig_col!=0) {
                    matrice[NUMERO_ELEMENTI_P-1][ZERO_P]=0;
                    for (int i = 0; i < NUMERO_ELEMENTI; i++) {
                        somma+=matrice[i][ZERO_P];
                    }
                    matrice[NUMERO_ELEMENTI_P-1][ZERO_P]=-somma;
                    matrice[ZERO_P][NUMERO_ELEMENTI_P-1]=matrice[NUMERO_ELEMENTI_P-1][ZERO_P];
                    if (somma==0 && NUMERO_ELEMENTI>5 ){
                        //non corretto
                        System.out.println("E2");
                        return false;
                    }
                }


                int temp=somma;
                //TODO controlla 3 - 4
                if (((dim_rig_col!=0 && somma==0) || (dim_rig_col==1)) && NUMERO_ELEMENTI>4 ){
                    somma=(0-matrice[1][0]);
                    for (int i = UNO_P; i < NUMERO_ELEMENTI; i++) {
                        somma+=matrice[i][1];
                    }
                    if(somma==matrice[NUMERO_ELEMENTI-2][1] || temp==0){
                        //non corretto
                        int index1=NUMERO_ELEMENTI_P-2;
                        int index2=NUMERO_ELEMENTI_P-1;
                        matrice[index1][ZERO_P]=(0-matrice[index1][1]);
                        matrice[index2][ZERO_P+1]=matrice[index1][1];
                        matrice[ZERO_P][index1]=matrice[index1][1];
                        matrice[ZERO_P+1][index2]=matrice[index1][1];
                        //System.out.println("E3");
                        //return false;
                    }
                }



                return true;
            }

               /**
                 * <h1> equilibrioMatrice </h1>
                 * <p>Metodo che crea la matrice necessaria per generare l'equilibrio</p>
                 * <p>
                 * Primo passo:
                 *
                 *  Crea una matrice di questo tipo:
                 *  (Quadrata di ordine NUMERO_ELEMENTI, simmetrica)
                 *
                 *  0	-3	1	2	1	-3	2
                 *  -3	0	-1	1	3	3	-3
                 *  1	-1	0	-3	-1	3	1
                 *  2	1	-3	0	-3	1	2
                 *  1	3	-1	-3	0	-1	1
                 *  -3	3	3	1	-1	0	-3
                 *  2	-3  1	2	1	-3	0
                 *
                 *  Secondo passo:
                 *  Converte la matrice in una matrice di adiacenza
                 *
                 *  0	3	0	0	0	3	0
                 *  0	0	1	0	0	3	3
                 *  1	0	0	3	1	0	0
                 *  2	1	0	0	3	0	0
                 *  1	3	0	0	0	1	0
                 *  0	0	3	1	0	0	3
                 *  2	0	1	2	1	0	0
                 *
                 *  Terzo passo:
                 *  Si assicura che la matrice sia corretta altrimenti il primo elemento della matrice viene
                 *  portato a -1
                 *  </p>
                 *  <b> Nota: Funziona solo se richiamato da equilibrio </b>
                 *
                 * @author Thomas Causetti
                 * @return int[][] se matrice non corretta int[0][0]=-1
                 */

                public int[][] equilibrioMatrice(){

                    //=================================================
                    //Inizializzo generatore N random
                    Random rand = new Random();

                    //=================================================
                    //Creo nuova matrice
                    int [][] matrice = new int[NUMERO_ELEMENTI][NUMERO_ELEMENTI];

                    //=================================================
                    //Diagonale di zeri
                    for (int i = 0; i < NUMERO_ELEMENTI; i++) {
                        matrice[i][i]=0;
                    }
                    //=================================================
                    //Genero la matrice partendo dal bordo esterno fino a quelli piu' interni. (Nota: non funziona nel verso opposto)
                    boolean bool=true;
                    do {
                        for (int i = 0; i < (NUMERO_ELEMENTI/2); i++) {
                                bool=generatoreBordoMatrice(rand, matrice, i);
                            if (bool == false) {
                                break;
                            }
                        }
                    }while(!bool);
                    //=================================================

                    //=================================================
                    //Visualizzo (Utile per Debug) :P
                    visualizzaMatrice(matrice);
                    //System.out.print("\n");
                    //=================================================

                    //Creo una nuova matrice (Adiacenza)
                    int [][] matrice_adia = new int[NUMERO_ELEMENTI][NUMERO_ELEMENTI];

                    //Converto la matrice dal mio generatore a matrice adiacenza
                    for (int i = 0; i < NUMERO_ELEMENTI; i++) {
                        for (int j = 0; j < NUMERO_ELEMENTI; j++) {
                            //Triangolo inferiore
                            if (i>j){
                                if (matrice[i][j]>0) {
                                    matrice_adia[i][j]=matrice[i][j];
                                }
                                else {
                                    matrice_adia[i][j]=0;
                                }
                            }
                            //Triangolo superiore
                            else if (i<j){
                                if (matrice[i][j]<0) {
                                    matrice_adia[i][j]=Math.abs(matrice[i][j]);
                                }
                                else {
                                    matrice_adia[i][j]=0;
                                }
                            }
                            //Diagonale
                            else {
                                matrice_adia[i][j]=0;
                            }
                        }
                    }


                    //=======================================================================
                    //Fix 2 column (Per fare in modo che tutte le somme siano giuste)
                    //=======================================================================

                    int somma=0;
                    for (int i = 0; i < NUMERO_ELEMENTI; i++) {
                        somma-=matrice_adia[i][1];
                    }
                    for (int i = 0; i < NUMERO_ELEMENTI; i++) {
                        somma+=matrice_adia[1][i];
                    }

                    //System.out.println(somma);

                    //Visualizza
                    //visualizzaMatrice(matrice_adia);
                    //System.out.print("\n");


                    //matrice_adia[][];



                    //visualizzaMatrice(matrice_adia);

                    if(matrice_adia[1][NUMERO_ELEMENTI-2]==0){
                        matrice_adia[NUMERO_ELEMENTI-2][1]+=somma;
                    }
                    else {
                        matrice_adia[1][NUMERO_ELEMENTI-2]-=somma;
                    }

                    if(matrice_adia[1][NUMERO_ELEMENTI-2]<0){
                        matrice_adia[NUMERO_ELEMENTI-2][1]=Math.abs(matrice_adia[1][NUMERO_ELEMENTI-2]);
                        matrice_adia[1][NUMERO_ELEMENTI-2]=0;
                    }

                    if(matrice_adia[NUMERO_ELEMENTI-2][1]<0){
                        matrice_adia[1][NUMERO_ELEMENTI-2]=Math.abs(matrice_adia[NUMERO_ELEMENTI-2][1]);
                        matrice_adia[NUMERO_ELEMENTI-2][1]=0;
                    }

                    //Visualizza
                    //visualizzaMatrice(matrice_adia);
                    /*
                    for (int i = 0; i < NUMERO_ELEMENTI/2; i++) {
                        //System.out.println(matrice_adia[(NUMERO_ELEMENTI-1)-i][i]+"+"+matrice_adia[i][(NUMERO_ELEMENTI-1)-i]);
                        if(matrice_adia[(NUMERO_ELEMENTI-1)-i][i]==matrice_adia[i][(NUMERO_ELEMENTI-1)-i]){
                            if(matrice_adia[((NUMERO_ELEMENTI-1)-i)-1][i]==0){
                                matrice_adia[((NUMERO_ELEMENTI-1)-i)-1][i]=1;
                                matrice_adia[((NUMERO_ELEMENTI-1)-i)][i+1]=1;
                                matrice_adia[i][(NUMERO_ELEMENTI-1)-i]=1;
                            }
                            else {
                                matrice_adia[i][((NUMERO_ELEMENTI-1)-i)-1]=matrice_adia[((NUMERO_ELEMENTI-1)-i)-1][i];
                                matrice_adia[i+1][((NUMERO_ELEMENTI-1)-i)]=matrice_adia[((NUMERO_ELEMENTI-1)-i)][i+1];
                                matrice_adia[((NUMERO_ELEMENTI-1)-i)-1][i]=0;
                                matrice_adia[((NUMERO_ELEMENTI-1)-i)][i+1]=0;

                                int somma1=0;
                                for (int j = 0; j < NUMERO_ELEMENTI; j++) {
                                    somma1-=matrice_adia[j][(NUMERO_ELEMENTI-1)-i];
                                }
                                for (int j = 0; j < NUMERO_ELEMENTI;j++) {
                                    somma1+=matrice_adia[(NUMERO_ELEMENTI-1)-i][j];
                                }

                                matrice_adia[(NUMERO_ELEMENTI-1)-i][i]+=somma1;

                                if(matrice_adia[(NUMERO_ELEMENTI-1)-i][i]<0){
                                    matrice_adia[i][(NUMERO_ELEMENTI-1)-i]=matrice_adia[(NUMERO_ELEMENTI-1)-i][i];
                                    matrice_adia[(NUMERO_ELEMENTI-1)-i][i]=0;
                                }
                            }
                        }
                    }
                    */

                    //=======================================================================
                    //Controllo numero collegamenti
                    //=======================================================================

                    controlloNumeroCollegamenti(matrice_adia);
                    //=======================================================================

                    //=======================================================================
                    //Return matrice Adiacenza
                    return matrice_adia;
                    //=======================================================================
                }